NEM application : Common Technical Specifications
=======================================================
Application version 0.0.3 - 05th of December 2020

== 0.0.1
  - Initial release
== 0.0.2
  - Update to make it work with both Ledger Nano S and Ledger Nano X
== 0.0.3
  - Update to fix security bugs reported from Ledger

== About

This application describes the APDU messages interface to communicate with the NEM application.

The application covers the following functionalities:

  - Retrieve a public NEM address given a BIP 32 path
  - Sign a NEM transaction given a BIP 32 path

The application interface can be accessed over HID

== General purpose APDUs

=== GET NEM PUBLIC ADDRESS

==== Description

This command returns the public key and NEM address for the given BIP 32 path.

The address can be optionally checked on the device before being returned.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*   | *P1*          | *P2*          | *LENGTH_COMMAND (Lc)*    | *DATA*
|   E0  |   02    |  00 : return address and public key without confirmation
                  |
                  |  01 : show address and permission checking on Ledger device screen


                                  | 40 : use secp256k1 curve (bitmask)
                                  |
                                  | 80 : use ed25519 curve (bitmask)


                                                  | Define number of the following bytes in the command


                                                                             | variable
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| NEM address length                                                                | 1
| NEM address                                                                       | var
| Public Key length                                                                 | 1
| Uncompressed Public Key                                                           | var
|==============================================================================================================================


=== SIGN NEM TRANSFER TRANSACTION

==== Description

This command signs a NEM transfer transaction after having the user validate the following parameters

  - Source account
  - Destination account
  - Amount
  - Fee

The input data is the serialized according to NEM internal serialization protocol

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*   | *P1*          | *P2*          | *LENGTH_COMMAND (Lc)*    | *DATA*
|   E0  |   04    |
                  | first transaction data block - 00 : last transaction data block
                  |                              \ 80 : has subsequent transaction data block
                  | subsequent transaction data block - 01 : last transaction data block
                                                      \ 81 : has subsequent transaction data block

                                  | 40 : use secp256k1 curve (bitmask)
                                  |
                                  | 80 : use ed25519 curve (bitmask)


                                                  | Define number of the following bytes in the command


                                                                             | variable
|==============================================================================================================================

'Input data (first transaction data block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
| Serialized transaction chunk                                                      | variable
|==============================================================================================================================

'Input data (other transaction data block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Serialized transaction chunk                                                      | variable
|==============================================================================================================================


'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| DER encoded signature                                                             | variable
|==============================================================================================================================

=== GET APP CONFIGURATION

==== Description

This command returns specific application configuration

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *DATA
|   E0  |   06   |  00                |  00        | 00
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Reserved byte                                                                     | 01
| Application major version                                                         | 01
| Application minor version                                                         | 01
| Application patch version                                                         | 01
|==============================================================================================================================


== Transport protocol

=== General transport description

Ledger APDUs requests and responses are encapsulated using a flexible protocol allowing to fragment large payloads over different underlying transport mechanisms.

The common transport header is defined as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Communication channel ID (big endian)                                             | 2
| Command tag                                                                       | 1
| Packet sequence index (big endian)                                                | 2
| Payload                                                                           | var
|==============================================================================================================================

The Communication channel ID allows commands multiplexing over the same physical link. It is not used for the time being, and should be set to 0101 to avoid compatibility issues with implementations ignoring a leading 00 byte.

The Command tag describes the message content. Use TAG_APDU (0x05) for standard APDU payloads, or TAG_PING (0x02) for a simple link test.

The Packet sequence index describes the current sequence for fragmented payloads. The first fragment index is 0x00.

=== APDU Command payload encoding

APDU Command payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU length (big endian)                                                          | 2
| APDU CLA                                                                          | 1
| APDU INS                                                                          | 1
| APDU P1                                                                           | 1
| APDU P2                                                                           | 1
| APDU length                                                                       | 1
| Optional APDU data                                                                | var
|==============================================================================================================================

=== APDU Response payload encoding

APDU Response payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU response length (big endian)                                                 | 2
| APDU response data and Status Word                                                | var
|==============================================================================================================================

=== USB mapping

Messages are exchanged with the dongle over HID endpoints over interrupt transfers, with each chunk being 64 bytes long. The HID Report ID is ignored.

== Status Words

The following standard Status Words are returned for all APDUs - some specific Status Words can be used for specific commands and are mentioned in the command description.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Canceled by user)
|   6A80   | Invalid data
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (Internal error, please report)
|   9000   | Normal ending of the command
|================================================================================================
